install.packages("spatialprobit")
library(spatialprobit)
help(spatialprobit)
install.packages("tmvtnorm")
library(tmvtnorm)
install.packages("mvtnorm")
library(mvtnorm)
library(Matrix)
I_n_dense <- diag(10000)
print(object.size(I_n_dense), units = "Mb")
rm(I_n_dense)
I_n_dense <- Diagonal(10000)
print(object.size(I_n_dense), units = "Mb")
I_n_dense
rm(I_n_dense)
I_n_dense <- sparseMatrix(i=1:10000, j =1:10000, x=1)
I_n_dense
print(object.size(I_n_dense), units = "Mb")
rm(I_n_dense)
I_n_dense <- Diagonal(10000)
print(object.size(I_n_dense), units = "b")
I_n_dense <- sparseMatrix(i=1:10000, j =1:10000, x=1)
print(object.size(I_n_dense), units = "b")
library(Matrix)
I_n_dense <- diag(10000)
print(object.size(I_n_dense), units = "b")
print(object.size(I_n_dense), units = "Mb")
rm(I_n_dense)
I_n_dense <- sparseMatrix(i=1:10000, j =1:10000, x=1)
print(object.size(I_n_dense), units = "Mb")
print(object.size(I_n_dense), units = "b")
rm(I_n_dense)
I_n_dense <- Diagonal(10000)
print(object.size(I_n_dense), units = "Mb")
print(object.size(I_n_dense), units = "b")
library(spatialprobit)
n<- 400
beta <- c(0, 1, -1)
rho <- 0.75
X <- cbind(intercept = 1, x = rnorm(n), y = rnorm(n))
I_n <- sparseMatrix(i = 1:n, j = 1:n, x = 1)
kNearestNeighbors
W <- kNearestNeighbors(x = rnorm(n), y = rnorm(n),     k = 6)
W
kNearestNeighbors
knearneigh
knearneighbours
W <- kNearestNeighbors(x = 1:n, y =1:n,     k = 6)
help(kNearestNeighbors)
library(spdep)
eps <- rnorm(n = n, mean = 0, sd = 1)
eps
z <- solve(qr(I_n - rho * W), X %*% beta + eps)
qr(I_n - rho * W)
y <- as.vector(z >= 0)
y
sarprobit.fit1 <- sar_probit_mcmc(y, X, W,  ndraw = 1000, burn.in = 200, thinning = 1,      m = 10)
summary(sarprobit.fit1)
plot(sarprobit.fit1)
library(igraph)
install.packages("igraph")
library(igraph)
set.seed(1.2345)
n <- 200
branch <- 3
probability <- branch/n
probability
grandom <- igraph::erdos.renyi.game(n = n,      p.or.m = probability, type = "gnp", directed = F,      loops = F)
grandom
V(grandom)$name <- 1:n
A <- igraph::get.adjacency(grandom, type = "both",     binary = T, sparse = T)
A <- igraph::get.adjacency(grandom, type = "both",  binary = T, sparse = T)
A <- igraph::get.adjacency(grandom, type = "both",  binary = T,  sparse = T)
A <- igraph::get.adjacency(grandom, type = "both",   sparse = T)
A
W <- A/rowSums(A)
plot(grandom, vertex.label.family = "sans",    vertex.size = 2, vertex.label = "",     layout = layout.fruchterman.reingold)
x <- rnorm(n)
X <- cbind(intercept = rep(1, n), x = x)
p <- 0.3
beta <- c(-1, 2)
I_n <- sparseMatrix(i = 1:n, j = 1:n, x = 1)
z <- solve(qr(I_n - p * W), X %*% beta + rnorm(n))
y <- as.real(z >= 0)
sarprobit.fit <- sar_probit_mcmc(y, X, W,     ndraw = 3000, burn.in = 200, thinning = 1)
y
z <- solve(qr(I_n - p * W), X %*% beta + rnorm(n))
z
I_n <- sparseMatrix(i = 1:n, j = 1:n, x = 1)
I_n
x <- rnorm(n)#
X <- cbind(intercept = rep(1, n), x = x)
X
p <- 0.3#
 beta <- c(-1, 2)#
 I_n <- sparseMatrix(i = 1:n, j = 1:n, x = 1)#
z <- solve(qr(I_n - p * W), X %*% beta + rnorm(n))
z
qr(I_n - p * W)
beta
qr(I_n - p * W), X %*% beta
solve(qr(I_n - p * W), X %*% beta + rnorm(n))
x <- rnorm(n)
x
X <- cbind(intercept = rep(1, n), x = x)
X
p <- 0.3
beta <- c(-1, 2)
beta
p <- 0.3
I_n <- sparseMatrix(i = 1:n, j = 1:n, x = 1)
solve(qr(I_n - p * W), X %*% beta + rnorm(n))
W <- A/rowSums(A)
W
A <- igraph::get.adjacency(grandom, type = "both",   binary = T, sparse = T)
grandom
V(grandom)$name <- 1:n
igraph::get.adjacency(grandom, type = "both",   binary = T, sparse = T)
help(igraph::get.adjacency)
W <- A/rowSums(A)
W
grandom <- igraph::erdos.renyi.game(n = n,      p.or.m = probability,  type = "gnp", directed = F,      loops = F)
grandom
V(grandom)$name <- 1:n
A <- igraph::get.adjacency(grandom, type = "both",   binary = T, sparse = T)
load("CMK.RData")
library(igraph)#
set.seed(1.2345)#
n <- 200#
branch <- 3#
probability <- branch/n#
grandom <- igraph::erdos.renyi.game(n = n,      p.or.m = probability,  type = "gnp", directed = F,      loops = F)#
V(grandom)$name <- 1:n
A <- igraph::get.adjacency(grandom, type = "both",   binary = T, sparse = T)
W <- A/rowSums(A)
A <- igraph::get.adjacency(grandom, type = "both",   binary = T, sparse = T)
W <- A/rowSums(A)
t = 2
T=2
IT<- diag(T)
IT
N=3
IN <- diag(N)
IN
JT<- matrix(1,2,2)
JT
Jbar<- 1/T*JT
Jbar
Q=IT-Jbar;
Q
Q=IT-Jbar
Q
eigen(Q)
vec<-eigen(Q)
vec
vec$vectors[vec$vectors==1]
vec$vectors[vec$vectors==1,]
vec$vectors[vec$values==1]
vec$vectors[,vec$values==1]
kroneker(vec$vectors[,vec$values==1] , IN)
kronecker(vec$vectors[,vec$values==1] , IN)
kronecker(t(vec$vectors[,vec$values==1] ), IN)
vec$vectors[vec$values==1]
vec$vectors[vec$values==1]
vec$vectors[vec$vectors==1,]
vec$vectors[vec$values==1,]
kronecker(t(vec$vectors[,vec$values==1] ), IN)
Fmat <- vec$vectors[,vec$values==1]
Fmat
kronecker(t(Fmat), IN)
Ftm <- kronecker(t(Fmat), IN)
Ftm
IT <- Diagonal(T)
IT <- Diagonal(T)
IT <- Diag(T)
library(Matrix)
IT <- Diag(T)
IT <- Diag(T)
IT <- Diagonal(T)
IT
IN <- diag(n)
IN <- Diagonal(n)
n=N
IN <- Diagonal(n)
IN
JT <- matrix(1,T,T)
JT
Jbar <- 1/T * JT
Jbar
Qmat <-IT - Jbar
Qmat
vec <- eigen(Qmat)
vec
Fmat <- vec$vectors[,vec$values==1]
Fmat
Ftm <- kronecker(t(Fmat), IN)
Ftm
Fmat <- vec$vectors[,vec$values==L1]
Fmat <- vec$vectors[,vec$values==1L]
Fmat
Ftm <- kronecker(t(Fmat), IN)
Ftm
iotan <- matrix(1,1,n)
iotan
iotan <- matrix(1,n,1)
iotan
Jnbar <-1/n * iotan %*% t(iotan)
Jnbar
Qmat1 <-  IN - Jnbar
Qmat1
vec1 <- eigen(Qmat1)
vec1
Fmat1 <- vec1$vectors[,vec1$values==1L]
Fmat1
FFmat<- kronecker(t(Fmat), t(Fmat1))
FFmat
FFmat<- kronecker(Fmat, Fmat1)
FFmat
Fmat
Fmat1
Fmat1
Fmat
Fmat <- matrix(vec$vectors[,vec$values==1L], T, T-1)
Fmat
Ftm <- kronecker(t(Fmat), IN)
Ftm
Fmat1 <- matrix(vec1$vectors[,vec1$values==1L], n, n-1)
Fmat1
FFmat<- kronecker(Fmat, Fmat1)
FFmat
FFmat<- kronecker(t(Fmat), Fmat1)
FFmat
Ftm
FFmat<- kronecker(t(Fmat), Fmat1)
FFmat
FFmat<- kronecker(Fmat, Fmat1)
FFmat
FFmat<- kronecker(Fmat, t(Fmat1))
FFmat
FFmat<- kronecker(t(Fmat), t(Fmat1))
FFmat
help(spfeml)
help(spml)
help(spfeml)
help(spml)
help(splm)
help(spml)
library(splm)
help(spfeml)
library(splm)
help(spml)
help(spgm)
library(spdep)
library(spdep)
help(sacsarlm)
sacsarlm
help(sarlm)
lagsarlm
help(lagsarlm)
errorsarlm
